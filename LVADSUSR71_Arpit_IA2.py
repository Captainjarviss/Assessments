# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XdUzVF0CcJsm7crjWvxPT5eaZUHbsqP3
"""

# q1
import numpy as np

def rgb_to_grayscale(rgb_image):
    red_channel = rgb_image[:, :, 0]
    green_channel = rgb_image[:, :, 1]
    blue_channel = rgb_image[:, :, 2]

    grayscale_image = 0.2989 * red_channel + 0.5870 * green_channel + 0.1140 * blue_channel

    return grayscale_image

rgb_image = np.array([[[255, 0, 0], [0, 255, 0], [0, 0, 255]],
                      [[255, 255, 0], [255, 0, 255], [0, 255, 255]],
                      [[127, 127, 127], [200, 200, 200], [50, 50, 50]]])

grayscale_image = rgb_to_grayscale(rgb_image)

print("Grayscale Image: ",grayscale_image)

# q2
import numpy as np

def normalize_data(data):
    means = np.mean(data, axis=0)
    stds = np.std(data, axis=0)

    normalized_data = (data - means) / stds

    return normalized_data



# q3
data= np.array([
    [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]],
    [[13, 14, 15], [16, 17, 18], [19, 20, 21], [22, 23, 24]]
])

import numpy as np

flattened_data = [sensor.flatten() for sensor in data]

concatenated_data = np.concatenate(flattened_data, axis=0)

reshaped_data = np.reshape(concatenated_data, (data.shape[0], -1))
print(reshaped_data)

# q4
scores = np.array([[1, 2, 3],
                     [4, 5, 6],
                     [7, 8, 9]])


import numpy as np

first_game_index = 0
last_game_index = -1

first_game_scores = scores[:, first_game_index]
last_game_scores = scores[:, last_game_index]

improvement = last_game_scores - first_game_scores
print(improvement)

# q5

array = np.array([[90, 85, 92, -1],
                  [80, 88, -1, 90],
                  [85, -1, 88, 87]])
last_three_subjects = array[:, -3:]

for row in range(array.shape[0]):
    exempt_scores_filtered = last_three_subjects[row][last_three_subjects[row] != -1]
    average_score = exempt_scores_filtered.mean()
    print(f"Average score for student {row + 1}: {average_score}")

import numpy as np

last_three_subjects = array[:, -3:]

for row in range(array.shape[0]):
    exempt_scores_filtered = last_three_subjects[row][last_three_subjects[row] != -1]
    average_score = exempt_scores_filtered.mean()
    print(f"Average score for student {row + 1}: {average_score}")

# q6

temperature_data= np.array([[0, 8, 92, -1],
                  [80, 88, -1, 9],
                  [5, 1, 8, 7]])
adjustment_factors=np.array([[20, 8, 92, -1],
                  [80, 48, -1, 19],
                  [5, 11, 83, 7]])
a=adjustment_factors.reshape(4,3,-1)

import numpy as np

def apply_adjustment_factors(temperature_data, a):

    adjusted_factors = a.reshape(1, -1)


    adjusted_temperatures = temperature_data * adjusted_factors

    return adjusted_temperatures

adjusted_temperatures = apply_adjustment_factors(temperature_data, a)

# q7
data = {
    'Name': ['Alice', 'Bob', 'Charlie', 'David', 'Eve', 'Frank', 'Grace'],
    'Age': [25, 30, 35, 40, 45, 50, 55],
    'City': ['New York', 'Los Angeles', 'Chicago', 'Houston', 'Phoenix', 'Miami', 'Boston'],
    'Department': ['HR', 'IT', 'Finance', 'Marketing', 'Sales', 'IT', 'HR']
}

filtered_employees = [(name, city) for name, age, city, department in zip(data['Name'], data['Age'], data['City'], data['Department']) if age < 45 and department != 'HR']

for name, city in filtered_employees:
    print(f"Name: {name}, City: {city}")

# q8

import pandas as pd
data = {
    'Product': ['Apples', 'Bananas', 'Cherries', 'Dates', 'Elderberries', 'Flour', 'Grapes'],
    'Category': ['Fruit', 'Fruit', 'Fruit', 'Fruit', 'Fruit', 'Bakery', 'Fruit'],
    'Price': [1.20, 0.50, 3.00, 2.50, 4.00, 1.50, 2.00],
    'Promotion': [True, False, True, True, False, True, False]
}

df = pd.DataFrame(data)
fruit_df = df[(df['Category'] == 'Fruit') & (df['Promotion'] == False)]

avg_price_fruit = df[df['Category'] == 'Fruit']['Price'].mean()

candidates = fruit_df[fruit_df['Price'] > avg_price_fruit]

print("candidates for future promotions:")
print(candidates)

# q9
import pandas as pd

employee_data = {
    "Employee": ["Alice", "Bob", "Charlie", "David"],
    "Department": ["HR", "IT", "Finance", "IT"],
    "Manager": ["John", "Rachel", "Emily", "Rachel"]
}


project_data = {
    "Employee": ["Alice", "Charlie", "Eve"],
    "Project": ["P1", "P3", "P2"]
}

employee_df = pd.DataFrame(employee_data)
project_df = pd.DataFrame(project_data)


merged_df = pd.merge(project_df, employee_df, on="Employee", how="left")

department_overview = merged_df.groupby(["Department", "Manager"]).agg({"Project": lambda x: list(x)}).reset_index()

for department, manager in zip(employee_df["Department"], employee_df["Manager"]):
    if not department_overview[(department_overview["Department"] == department) & (department_overview["Manager"] == manager)].empty:
        continue
    department_overview = department_overview.append({"Department": department, "Manager": manager, "Project": []}, ignore_index=True)

print(department_overview)

# q10
data={'Department':['Electronics','Electronincs','Clothing','Clothing','Home Goods']
      'Salesperson':['Alice','Bob','Charlie','David','Eve'
      'Sales':[700]]}