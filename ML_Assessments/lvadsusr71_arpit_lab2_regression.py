# -*- coding: utf-8 -*-
"""lvadsusr71_arpit_lab2_regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ysxDnHTvBRc511BHXBuVRf5IVF8-Cdjt
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

data=pd.read_csv("/content/sample_data/auto-mpg.csv")
data.head()

data.info()

data.isnull().sum()

mpg_data=data
mpg_data.dropna(inplace=True)
mpg_data = mpg_data[mpg_data.horsepower != '?']  # Remove '?' entries in horsepower
mpg_data['horsepower'] = mpg_data['horsepower'].astype(float)

plt.figure(figsize=(8, 6))
sns.distplot(mpg_data['mpg'])
plt.title('Distribution of Miles per Gallon (mpg)')
plt.xlabel('Miles per Gallon (mpg)')
plt.ylabel('Density')
plt.show()

sns.pairplot(mpg_data[['mpg', 'cylinders', 'displacement', 'horsepower', 'weight', 'acceleration']])
plt.show()

numerical_cols = ['cylinders', 'displacement', 'horsepower', 'weight', 'acceleration']
z_scores = np.abs(stats.zscore(mpg_data[numerical_cols]))
mpg_data_clean = mpg_data[(z_scores < 3).all(axis=1)]

X = mpg_data_clean[numerical_cols]
y = mpg_data_clean['mpg']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

model = LinearRegression()
model.fit(X_train_scaled, y_train)

y_pred = model.predict(X_test_scaled)
rmse = mean_squared_error(y_test, y_pred, squared=False)
r2 = r2_score(y_test, y_pred)

from sklearn.metrics import mean_squared_error, r2_score,mean_absolute_error
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)
lr = LinearRegression()
lr.fit(X_train, y_train)
y_pred = lr.predict(X_test)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
mae=mean_absolute_error(y_test, y_pred)
print("Mean Squared Error:", mse)
print("R-squared:", r2)
print("Mean Absolute Error:", mae)

plt.scatter(y_test, y_pred, color='blue', label='Actual vs. Predicted')
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], color='red', linestyle='--', label='Regression Line')
plt.xlabel('Actual mpg')
plt.ylabel('Predicted mpg')
plt.title('Regression Line for Predicted vs. Actual mpg')
plt.legend()
plt.show()

